import string
from collections import Counter

# Define English letter frequency (from most to least common)
ENGLISH_FREQUENCY = 'ETAOINSHRDLCUMWFGYPBVKJXQZ'

# Function to get frequency of letters in the ciphertext
def get_letter_frequency(text):
    text = ''.join(filter(str.isalpha, text.upper()))  # Keep only letters
    return Counter(text)

# Function to map cipher letters to most likely plain letters based on frequency analysis
def get_substitution_mapping(ciphertext):
    letter_frequency = get_letter_frequency(ciphertext)
    most_common = ''.join([pair[0] for pair in letter_frequency.most_common()])
    mapping = dict(zip(most_common, ENGLISH_FREQUENCY))
    return mapping

# Function to decrypt the ciphertext using the mapping
def decrypt_with_mapping(ciphertext, mapping):
    decrypted_text = ''
    for char in ciphertext.upper():
        if char in mapping:
            decrypted_text += mapping[char]
        else:
            decrypted_text += char
    return decrypted_text

# Example usage
if __name__ == '__main__':
    ciphertext = input("Enter the ciphertext: ")
    mapping = get_substitution_mapping(ciphertext)
    decrypted_text = decrypt_with_mapping(ciphertext, mapping)
    print("Decrypted text:", decrypted_text)
